
Arser (c)2015 Martin Cameron

Arser is a parser, validator and document object model for an SGML-like
markup language for the Java platform. I don't expect anyone to find this
particularly useful, but here it is.

Features:

XML style content models, based on the regex engine showcased at
http://morepypy.blogspot.com/2010/05/efficient-and-elegant-regular.html

SGML style markup-minimization. End tags may be omitted and the validator
will insert them if the markup would otherwise be invalid. Attribute
names may also be omitted if the attribute value is unique for all the
multi-valued attributes in the element declaration.

SGML style inclusions and exclusions. An element may include a list of
element names that may appear anywhere within its children (or its
children's children), or exclude a list of elements in the same manner.

A document object model that can validate nodes in memory.

Syntax:

The syntax is a carefully chosen subset of SGML, and it is possible
to handle certain SGML documents using this parser. For example:

<!--Comment-->
<!declaration param1 "param 2" [<!subdeclaration>]>
<?processing instruction>
<![ CDATA[Marked characters]]>
&entity;
<document>
	Character data
	<tag attribute=hello>
		Some more character data.
	</tag>
</document>

Parsing and Validation:

The Parser reads the markup and calls an instance of the Handler interface.
The Validator is a Handler implementation that requires all elements to
have a declaration specified by a Doctype. The Validator will not load a
Doctype automatically, so the Validator.doctype() method must be called
before the first element is encountered. A doctype file can be parsed into
a Doctype instance for use with the Validator by calling Doctype.parse().
The doctype to use for a particular document could be determined using
the information contained in a declaration event, as is done by the
arsersgml.ParseSGML class.

Below is the syntax for the Doctype format, which may be generated by
calling Doctype.doctype().write( writer ). From this you can get an idea
of some of the markup minimization features:

<doctype>
	<element name=element content=attribute* omit>
		<attribute name=name required>
		<attribute name=content>
		<attribute name=include>
		<attribute name=exclude>
		<attribute name=type values="mixed,empty,omit" default="mixed">
	<element name=attribute empty>
		<attribute name=name required>
		<attribute name=values>
		<attribute name=default>
		<attribute name=required values="required,optional" default="optional">
	<element name=doctype content=element* omit>

The source is quite well documented (for me), and there are also a decent number
of unit tests in the ParserTest class which might give you a better idea of the
usage.

Good luck!
Martin
